// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//cada entidade é chamada de model
//é uma abstração para trabalhar com bancos relacionais e não relacionais

//entidade Pool
model Pool {
  //chave primária
  //cada id é gerado automaticamente pelo algoritmo cuid() através do parâmetro @default()
  id        String   @id @default(cuid()) //notação @id indica chave primária
  title     String
  code      String   @unique //@unique define que o campo é único
  createdAt DateTime @default(now()) //now() anota a data de registro
  ownerId   String?

  participants Participant[]
  owner        User?         @relation(fields: [ownerId], references: [id])
}

model Participant {
  id     String @id @default(cuid())
  userId String
  poolId String

  guesses Guess[]
  user    User    @relation(fields: [userId], references: [id])
  pool    Pool    @relation(fields: [poolId], references: [id])

  @@unique([userId, poolId]) //definindo como informações únicas
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  avatarUrl String?
  createdAt DateTime @default(now())

  participatingAt Participant[] //o array define que pode estar relçacionado a muitos
  ownPools        Pool[]
}

model Game {
  id                    String   @id @default(cuid())
  date                  DateTime
  firstTeamCountryCode  String
  secondTeamCountryCode String

  guesses Guess[] //relacionamento inverso
}

model Guess {
  id               String   @id @default(cuid())
  firstTeamPoints  Int
  secondTeamPoints Int
  createdAt        DateTime @default(now())
  gameId           String
  participantId    String

  participant Participant @relation(fields: [participantId], references: [id])
  game        Game        @relation(fields: [gameId], references: [id]) //relacionamento
}
